/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    AcxEvents.h

Abstract:

    This is the interfaces for the Audio Class eXtension event objects

Environment:

    Kernel-mode.

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _ACXEVENTS_H_
#define _ACXEVENTS_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START



#if (NTDDI_VERSION >= NTDDI_WIN2K)




typedef
_Function_class_(EVT_ACX_EVENT_ENABLE)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
EVT_ACX_EVENT_ENABLE(
    _In_
    ACXEVENT Event
    );

typedef EVT_ACX_EVENT_ENABLE *PFN_ACX_EVENT_ENABLE;

typedef
_Function_class_(EVT_ACX_EVENT_DISABLE)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
VOID
NTAPI
EVT_ACX_EVENT_DISABLE(
    _In_
    ACXEVENT Event
    );

typedef EVT_ACX_EVENT_DISABLE *PFN_ACX_EVENT_DISABLE;

typedef struct _ACX_EVENT_CALLBACKS {
    ULONG                                   Size;
    PFN_ACX_EVENT_ENABLE                    EvtAcxEventEnable;
    PFN_ACX_EVENT_DISABLE                   EvtAcxEventDisable;
    PFN_ACX_OBJECT_PROCESS_EVENT_REQUEST    EvtAcxEventProcessRequest;
} ACX_EVENT_CALLBACKS, *PACX_EVENT_CALLBACKS;

VOID
FORCEINLINE
ACX_EVENT_CALLBACKS_INIT(
    _Out_ PACX_EVENT_CALLBACKS Callbacks
    )
{
    RtlZeroMemory(Callbacks, sizeof(ACX_EVENT_CALLBACKS));
    Callbacks->Size = ACX_STRUCTURE_SIZE(ACX_EVENT_CALLBACKS);
}

typedef struct _ACX_EVENT_CONFIG {
    ULONG                       Size;
    ULONG                       Flags;
    const GUID *                Set;
    ULONG                       Id;
    ULONG                       Type;
    PACX_EVENT_CALLBACKS        Callbacks;
} ACX_EVENT_CONFIG, *PACX_EVENT_CONFIG;

typedef enum _ACX_EVENT_CONFIG_FLAGS {
    AcxEventConfigNoFlags       = 0x00000000,
    AcxEventConfigValidFlags    = 0x00000000
} ACX_EVENT_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_EVENT_CONFIG_INIT(
    _Out_ PACX_EVENT_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_EVENT_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_EVENT_CONFIG);
}

//
// PNP event.
//
typedef struct _ACX_PNPEVENT_CONFIG {
    ULONG Size;
    ULONG Flags;
    GUID  Event;
} ACX_PNPEVENT_CONFIG, *PACX_PNPEVENT_CONFIG;

typedef enum _ACX_PNPEVENT_CONFIG_FLAGS {
    AcxPnpEventConfigNoFlags       = 0x00000000,
    AcxPnpEventConfigValidFlags    = 0x00000000
} ACX_PNPEVENT_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_PNPEVENT_CONFIG_INIT(
    _Out_ PACX_PNPEVENT_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_PNPEVENT_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_PNPEVENT_CONFIG);
}


//
// ACX Function: AcxEventCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXEVENTCREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXOBJECT Object,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_EVENT_CONFIG Config,
    _Out_
    ACXEVENT* Event
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxEventCreate(
    _In_
    ACXOBJECT Object,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_EVENT_CONFIG Config,
    _Out_
    ACXEVENT* Event
    )
{
    return ((PFN_ACXEVENTCREATE) AcxFunctions[AcxEventCreateTableIndex])(AcxDriverGlobals, Object, Attributes, Config, Event);
}

//
// ACX Function: AcxEventAddEventData
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
VOID
(NTAPI *PFN_ACXEVENTADDEVENTDATA)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXEVENT Event,
    _In_
    ACXEVENTDATA EventData
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
VOID
AcxEventAddEventData(
    _In_
    ACXEVENT Event,
    _In_
    ACXEVENTDATA EventData
    )
{
    ((PFN_ACXEVENTADDEVENTDATA) AcxFunctions[AcxEventAddEventDataTableIndex])(AcxDriverGlobals, Event, EventData);
}

//
// ACX Function: AcxEventGenerateEvent
//
typedef
WDFAPI
VOID
(NTAPI *PFN_ACXEVENTGENERATEEVENT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXEVENT Event
    );

FORCEINLINE
VOID
AcxEventGenerateEvent(
    _In_
    ACXEVENT Event
    )
{
    ((PFN_ACXEVENTGENERATEEVENT) AcxFunctions[AcxEventGenerateEventTableIndex])(AcxDriverGlobals, Event);
}

//
// ACX Function: AcxPnpEventCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPNPEVENTCREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    ACXOBJECT Object,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_PNPEVENT_CONFIG Config,
    _Out_
    ACXPNPEVENT* Event
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxPnpEventCreate(
    _In_
    WDFDEVICE Device,
    _In_
    ACXOBJECT Object,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_PNPEVENT_CONFIG Config,
    _Out_
    ACXPNPEVENT* Event
    )
{
    return ((PFN_ACXPNPEVENTCREATE) AcxFunctions[AcxPnpEventCreateTableIndex])(AcxDriverGlobals, Device, Object, Attributes, Config, Event);
}

//
// ACX Function: AcxPnpEventGenerateEvent
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPNPEVENTGENERATEEVENT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPNPEVENT Event,
    _In_
    PVOID Payload,
    _In_
    USHORT Size
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxPnpEventGenerateEvent(
    _In_
    ACXPNPEVENT Event,
    _In_
    PVOID Payload,
    _In_
    USHORT Size
    )
{
    return ((PFN_ACXPNPEVENTGENERATEEVENT) AcxFunctions[AcxPnpEventGenerateEventTableIndex])(AcxDriverGlobals, Event, Payload, Size);
}



#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


WDF_EXTERN_C_END

#endif // _ACXEVENTS_H_

