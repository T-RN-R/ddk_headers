/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    AcxDriver.h

Abstract:

    This is the interfaces for the Audio Class eXtension Driver object

Environment:

    kernel mode only

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _ACXDRIVER_H_
#define _ACXDRIVER_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START





#define ACX_TRACE_ID ('DxcA')

//
// ACX driver structures.
//
typedef struct _ACX_DRIVER_CONFIG {
    ULONG   Size;
    ULONG   Flags; // Reserved, init to zero.
} ACX_DRIVER_CONFIG, *PACX_DRIVER_CONFIG;

typedef enum _ACX_DRIVER_CONFIG_FLAGS {
    AcxDriverConfigNoFlags      = 0x00000000,
    AcxDriverConfigValidFlags   = 0x00000000
} ACX_DRIVER_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_DRIVER_CONFIG_INIT(
    _Out_ PACX_DRIVER_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_DRIVER_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_DRIVER_CONFIG);
    Config->Flags = AcxDriverConfigNoFlags;
}

typedef struct _ACX_DRIVER_VERSION_AVAILABLE_PARAMS {
  ULONG Size;
  ULONG MajorVersion;
  ULONG MinorVersion;
} ACX_DRIVER_VERSION_AVAILABLE_PARAMS, *PACX_DRIVER_VERSION_AVAILABLE_PARAMS;

VOID
FORCEINLINE
ACX_DRIVER_VERSION_AVAILABLE_PARAMS_INIT(
    _Out_ PACX_DRIVER_VERSION_AVAILABLE_PARAMS Params,
    _In_  ULONG     MajorVersion,
    _In_  ULONG     MinorVersion
    )
{
    RtlZeroMemory(Params, sizeof(ACX_DRIVER_VERSION_AVAILABLE_PARAMS));
    Params->Size = ACX_STRUCTURE_SIZE(ACX_DRIVER_VERSION_AVAILABLE_PARAMS);
    Params->MajorVersion = MajorVersion;
    Params->MinorVersion = MinorVersion;
}


//
// ACX Function: AcxDriverInitialize
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDRIVERINITIALIZE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDRIVER Driver,
    _In_
    PACX_DRIVER_CONFIG DriverConfig
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDriverInitialize(
    _In_
    WDFDRIVER Driver,
    _In_
    PACX_DRIVER_CONFIG DriverConfig
    )
{
    return ((PFN_ACXDRIVERINITIALIZE) AcxFunctions[AcxDriverInitializeTableIndex])(AcxDriverGlobals, Driver, DriverConfig);
}

//
// ACX Function: AcxDriverIsVersionAvailable
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
BOOLEAN
(NTAPI *PFN_ACXDRIVERISVERSIONAVAILABLE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDRIVER Driver,
    _In_
    PACX_DRIVER_VERSION_AVAILABLE_PARAMS VersionAvailableParams
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
BOOLEAN
AcxDriverIsVersionAvailable(
    _In_
    WDFDRIVER Driver,
    _In_
    PACX_DRIVER_VERSION_AVAILABLE_PARAMS VersionAvailableParams
    )
{
    return ((PFN_ACXDRIVERISVERSIONAVAILABLE) AcxFunctions[AcxDriverIsVersionAvailableTableIndex])(AcxDriverGlobals, Driver, VersionAvailableParams);
}




WDF_EXTERN_C_END

#endif // _ACXDRIVER_H_

