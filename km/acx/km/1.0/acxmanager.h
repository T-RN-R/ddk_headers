/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    AcxManager.h

Abstract:

    This is the interfaces for the Audio Class eXtension manager object

Environment:

    Kernel-mode.

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _ACXMANAGER_H_
#define _ACXMANAGER_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START



#if (NTDDI_VERSION >= NTDDI_WIN2K)




typedef struct _ACX_CIRCUIT_TEMPLATE_CONFIG {
    ULONG                   Size;
    ULONG                   Flags;

    //
    // Device/circuit container ID.
    //
    const GUID *            ContainerId;          // (optional).

    //
    // Note: all string IDs are case insensitive.
    //

    //
    // Factory properties (CircuitOnDemand option).
    //
    ACXOBJECTBAG            FactoryProperties;

    //
    // Factory IDs (CircuitOnDemand option).
    //
    // These are the possible mutually exclusive ID options:
    //
    // (1) [ContainerId] FactoryUri
    // (2) [ContainerId] FactoryId
    //
    const GUID *            FactoryId;          // Factory circuit ID.
    PCUNICODE_STRING        FactoryUri;         // Fully qualified factory resource ID.
    PCUNICODE_STRING        FactoryName;        // Set to NULL.

    //
    // Circuit properties.
    //
    ACXOBJECTBAG            CircuitProperties;

    //
    // For NOT CircuitOnDemand option:
    //
    // These are the possible mutually exclusive ID options:
    //
    // (1) [ContainerId] CircuitUri
    // (2) [ContainerId] CircuitId
    //
    // For CircuitOnDemand option:
    //
    // (1) These IDs are passed to its circuit factory during creation time.
    // (2) These IDs are not used by ACX manager as circuit identifiers at run-time.
    //
    const GUID *            CircuitId;          // Circuit ID.
    PCUNICODE_STRING        CircuitUri;         // Fully qualified circuit resource ID.
    PCUNICODE_STRING        CircuitName;        // Set to NULL.

} ACX_CIRCUIT_TEMPLATE_CONFIG, *PACX_CIRCUIT_TEMPLATE_CONFIG;

typedef enum _ACX_CIRCUIT_TEMPLATE_CONFIG_FLAGS {
    AcxCircuitTemplateConfigNoFlags     = 0x00000000,
    AcxCircuitTemplateCircuitOnDemand   = 0x00000001,
    AcxCircuitTemplateConfigValidFlags  = 0x00000001
} ACX_CIRCUIT_TEMPLATE_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_CIRCUIT_TEMPLATE_CONFIG_INIT(
    _Out_ PACX_CIRCUIT_TEMPLATE_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_CIRCUIT_TEMPLATE_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_CIRCUIT_TEMPLATE_CONFIG);
    Config->Flags = AcxCircuitTemplateConfigNoFlags;
}

typedef struct _ACX_COMPOSITE_TEMPLATE_CONFIG {
    ULONG                   Size;
    ULONG                   Flags;
    ACXOBJECTBAG            Properties; // optional
} ACX_COMPOSITE_TEMPLATE_CONFIG, *PACX_COMPOSITE_TEMPLATE_CONFIG;

typedef enum _ACX_COMPOSITE_TEMPLATE_CONFIG_FLAGS {
    AcxCompositeTemplateConfigNoFlags       = 0x00000000,
    AcxCompositeTemplateConfigPrivate       = 0x00000001,
    AcxCompositeTemplateConfigSingleton     = 0x00000002,
    AcxCompositeTemplateConfigValidFlags    = 0x00000003
} ACX_COMPOSITE_TEMPLATE_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_COMPOSITE_TEMPLATE_CONFIG_INIT(
    _Out_ PACX_COMPOSITE_TEMPLATE_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_COMPOSITE_TEMPLATE_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_COMPOSITE_TEMPLATE_CONFIG);
    Config->Flags = AcxCompositeTemplateConfigNoFlags;
}


//
// ACX Function: AcxGetManager
//
typedef
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
ACXMANAGER
(NTAPI *PFN_ACXGETMANAGER)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXCONTEXT Context
    );

_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
ACXMANAGER
AcxGetManager(
    _In_
    ACXCONTEXT Context
    )
{
    return ((PFN_ACXGETMANAGER) AcxFunctions[AcxGetManagerTableIndex])(AcxDriverGlobals, Context);
}

//
// ACX Function: AcxManagerAddCompositeTemplate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXMANAGERADDCOMPOSITETEMPLATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXMANAGER Manager,
    _In_
    ACXCOMPOSITETEMPLATE Template
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxManagerAddCompositeTemplate(
    _In_
    ACXMANAGER Manager,
    _In_
    ACXCOMPOSITETEMPLATE Template
    )
{
    return ((PFN_ACXMANAGERADDCOMPOSITETEMPLATE) AcxFunctions[AcxManagerAddCompositeTemplateTableIndex])(AcxDriverGlobals, Manager, Template);
}

//
// ACX Function: AcxManagerRemoveCompositeTemplate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXMANAGERREMOVECOMPOSITETEMPLATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXMANAGER Manager,
    _In_
    ACXCOMPOSITETEMPLATE Template
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxManagerRemoveCompositeTemplate(
    _In_
    ACXMANAGER Manager,
    _In_
    ACXCOMPOSITETEMPLATE Template
    )
{
    return ((PFN_ACXMANAGERREMOVECOMPOSITETEMPLATE) AcxFunctions[AcxManagerRemoveCompositeTemplateTableIndex])(AcxDriverGlobals, Manager, Template);
}

//
// ACX Function: AcxCompositeTemplateCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXCOMPOSITETEMPLATECREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDRIVER Driver,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_COMPOSITE_TEMPLATE_CONFIG Config,
    _Out_
    ACXCOMPOSITETEMPLATE* Template
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxCompositeTemplateCreate(
    _In_
    WDFDRIVER Driver,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_COMPOSITE_TEMPLATE_CONFIG Config,
    _Out_
    ACXCOMPOSITETEMPLATE* Template
    )
{
    return ((PFN_ACXCOMPOSITETEMPLATECREATE) AcxFunctions[AcxCompositeTemplateCreateTableIndex])(AcxDriverGlobals, Driver, Attributes, Config, Template);
}

//
// ACX Function: AcxCompositeTemplateAssignCircuits
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXCOMPOSITETEMPLATEASSIGNCIRCUITS)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXCOMPOSITETEMPLATE CompositeTemplate,
    _In_reads_(CircuitTemplatesCount)
    ACXCIRCUITTEMPLATE* CircuitTemplates,
    _In_
    ULONG CircuitTemplatesCount
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxCompositeTemplateAssignCircuits(
    _In_
    ACXCOMPOSITETEMPLATE CompositeTemplate,
    _In_reads_(CircuitTemplatesCount)
    ACXCIRCUITTEMPLATE* CircuitTemplates,
    _In_
    ULONG CircuitTemplatesCount
    )
{
    return ((PFN_ACXCOMPOSITETEMPLATEASSIGNCIRCUITS) AcxFunctions[AcxCompositeTemplateAssignCircuitsTableIndex])(AcxDriverGlobals, CompositeTemplate, CircuitTemplates, CircuitTemplatesCount);
}

//
// ACX Function: AcxCompositeTemplateSetCoreCircuit
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
VOID
(NTAPI *PFN_ACXCOMPOSITETEMPLATESETCORECIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXCOMPOSITETEMPLATE CompositeTemplate,
    _In_
    ACXCIRCUITTEMPLATE CircuitTemplates
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
VOID
AcxCompositeTemplateSetCoreCircuit(
    _In_
    ACXCOMPOSITETEMPLATE CompositeTemplate,
    _In_
    ACXCIRCUITTEMPLATE CircuitTemplates
    )
{
    ((PFN_ACXCOMPOSITETEMPLATESETCORECIRCUIT) AcxFunctions[AcxCompositeTemplateSetCoreCircuitTableIndex])(AcxDriverGlobals, CompositeTemplate, CircuitTemplates);
}

//
// ACX Function: AcxCircuitTemplateCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXCIRCUITTEMPLATECREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDRIVER Driver,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_CIRCUIT_TEMPLATE_CONFIG Config,
    _Out_
    ACXCIRCUITTEMPLATE* Template
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxCircuitTemplateCreate(
    _In_
    WDFDRIVER Driver,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_CIRCUIT_TEMPLATE_CONFIG Config,
    _Out_
    ACXCIRCUITTEMPLATE* Template
    )
{
    return ((PFN_ACXCIRCUITTEMPLATECREATE) AcxFunctions[AcxCircuitTemplateCreateTableIndex])(AcxDriverGlobals, Driver, Attributes, Config, Template);
}



#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


WDF_EXTERN_C_END

#endif // _ACXMANAGER_H_

