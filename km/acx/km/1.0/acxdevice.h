/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    AcxDevice.h

Abstract:

    This is the interfaces for the Audio Class eXtension Device object

Environment:

    Kernel-mode.

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _ACXDEVICE_H_
#define _ACXDEVICE_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START



#if (NTDDI_VERSION >= NTDDI_WIN2K)




//
// Dx exit-latency defines.
//
typedef enum _ACX_DX_EXIT_LATENCY { 
  AcxDxExitLatencyInstant     = 0,
  AcxDxExitLatencyFast,
  AcxDxExitLatencyResponsive
} ACX_DX_EXIT_LATENCY;

//
// ACX device structures.
//
#define ACX_DEVICEINIT_CONFIG_CONTEXT_SIZE 4

typedef struct _ACX_DEVICEINIT_CONFIG {
    ULONG                       Size;
    ULONG                       Flags; // Reserved, init to zero.
    WDF_SYNCHRONIZATION_SCOPE   SynchronizationScope;
    WDF_EXECUTION_LEVEL         ExecutionLevel;
    PVOID                       Context[ACX_DEVICEINIT_CONFIG_CONTEXT_SIZE];
} ACX_DEVICEINIT_CONFIG, *PACX_DEVICEINIT_CONFIG;

typedef enum _ACX_DEVICEINIT_CONFIG_FLAGS {
    AcxDeviceInitConfigNoFlags      = 0x00000000,
    AcxDeviceInitConfigRawDevice    = 0x00000001,
    AcxDeviceInitConfigValidFlags   = 0x00000001 // for validation
} ACX_DEVICEINIT_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_DEVICEINIT_CONFIG_INIT(
    _Out_ PACX_DEVICEINIT_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_DEVICEINIT_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_DEVICEINIT_CONFIG);
    Config->Flags = AcxDeviceInitConfigNoFlags;
    Config->SynchronizationScope = WdfSynchronizationScopeNone;
    Config->ExecutionLevel = WdfExecutionLevelPassive;
}

#define ACX_DEVICE_CONFIG_CONTEXT_SIZE 4

typedef struct _ACX_DEVICE_CONFIG {
    ULONG       Size;
    ULONG       Flags;
    PVOID       Context[ACX_DEVICE_CONFIG_CONTEXT_SIZE];
} ACX_DEVICE_CONFIG, *PACX_DEVICE_CONFIG;

typedef enum _ACX_DEVICE_CONFIG_FLAGS {
    AcxDeviceConfigNoFlags          = 0x00000000,
    AcxDeviceConfigValidFlags       = 0x00000000 // for validation
} ACX_DEVICE_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_DEVICE_CONFIG_INIT(
    _Out_ PACX_DEVICE_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_DEVICE_CONFIG));
    Config->Size = ACX_STRUCTURE_SIZE(ACX_DEVICE_CONFIG);
    Config->Flags = AcxDeviceConfigNoFlags;
}


//
// ACX Function: AcxDeviceInitInitialize
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEINITINITIALIZE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    PWDFDEVICE_INIT DeviceInit,
    _In_
    PACX_DEVICEINIT_CONFIG Config
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceInitInitialize(
    _In_
    PWDFDEVICE_INIT DeviceInit,
    _In_
    PACX_DEVICEINIT_CONFIG Config
    )
{
    return ((PFN_ACXDEVICEINITINITIALIZE) AcxFunctions[AcxDeviceInitInitializeTableIndex])(AcxDriverGlobals, DeviceInit, Config);
}

//
// ACX Function: AcxDeviceInitialize
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEINITIALIZE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    PACX_DEVICE_CONFIG DeviceConfig
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceInitialize(
    _In_
    WDFDEVICE Device,
    _In_
    PACX_DEVICE_CONFIG DeviceConfig
    )
{
    return ((PFN_ACXDEVICEINITIALIZE) AcxFunctions[AcxDeviceInitializeTableIndex])(AcxDriverGlobals, Device, DeviceConfig);
}

//
// ACX Function: AcxDeviceAddCircuit
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEADDCIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    ACXCIRCUIT Circuit
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceAddCircuit(
    _In_
    WDFDEVICE Device,
    _In_
    ACXCIRCUIT Circuit
    )
{
    return ((PFN_ACXDEVICEADDCIRCUIT) AcxFunctions[AcxDeviceAddCircuitTableIndex])(AcxDriverGlobals, Device, Circuit);
}

//
// ACX Function: AcxDeviceRemoveCircuit
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEREMOVECIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    ACXCIRCUIT Circuit
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceRemoveCircuit(
    _In_
    WDFDEVICE Device,
    _In_
    ACXCIRCUIT Circuit
    )
{
    return ((PFN_ACXDEVICEREMOVECIRCUIT) AcxFunctions[AcxDeviceRemoveCircuitTableIndex])(AcxDriverGlobals, Device, Circuit);
}

//
// ACX Function: AcxDeviceDetachCircuit
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEDETACHCIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    ACXCIRCUIT Circuit
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceDetachCircuit(
    _In_
    WDFDEVICE Device,
    _In_
    ACXCIRCUIT Circuit
    )
{
    return ((PFN_ACXDEVICEDETACHCIRCUIT) AcxFunctions[AcxDeviceDetachCircuitTableIndex])(AcxDriverGlobals, Device, Circuit);
}

//
// ACX Function: AcxDeviceAddCircuitDevice
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEADDCIRCUITDEVICE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE ParentDevice,
    _In_
    WDFDEVICE Device
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceAddCircuitDevice(
    _In_
    WDFDEVICE ParentDevice,
    _In_
    WDFDEVICE Device
    )
{
    return ((PFN_ACXDEVICEADDCIRCUITDEVICE) AcxFunctions[AcxDeviceAddCircuitDeviceTableIndex])(AcxDriverGlobals, ParentDevice, Device);
}

//
// ACX Function: AcxDeviceRemoveCircuitDevice
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEREMOVECIRCUITDEVICE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE ParentDevice,
    _In_
    WDFDEVICE Device
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceRemoveCircuitDevice(
    _In_
    WDFDEVICE ParentDevice,
    _In_
    WDFDEVICE Device
    )
{
    return ((PFN_ACXDEVICEREMOVECIRCUITDEVICE) AcxFunctions[AcxDeviceRemoveCircuitDeviceTableIndex])(AcxDriverGlobals, ParentDevice, Device);
}

//
// ACX Function: AcxDeviceAddFactoryCircuit
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEADDFACTORYCIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    ACXFACTORYCIRCUIT Factory
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceAddFactoryCircuit(
    _In_
    WDFDEVICE Device,
    _In_
    ACXFACTORYCIRCUIT Factory
    )
{
    return ((PFN_ACXDEVICEADDFACTORYCIRCUIT) AcxFunctions[AcxDeviceAddFactoryCircuitTableIndex])(AcxDriverGlobals, Device, Factory);
}

//
// ACX Function: AcxDeviceRemoveFactoryCircuit
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXDEVICEREMOVEFACTORYCIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    ACXFACTORYCIRCUIT Factory
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxDeviceRemoveFactoryCircuit(
    _In_
    WDFDEVICE Device,
    _In_
    ACXFACTORYCIRCUIT Factory
    )
{
    return ((PFN_ACXDEVICEREMOVEFACTORYCIRCUIT) AcxFunctions[AcxDeviceRemoveFactoryCircuitTableIndex])(AcxDriverGlobals, Device, Factory);
}

//
// ACX Function: AcxDeviceGetCurrentDxExitLatency
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ACX_DX_EXIT_LATENCY
(NTAPI *PFN_ACXDEVICEGETCURRENTDXEXITLATENCY)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    WDFDEVICE Device,
    _In_
    POWER_ACTION SystemPowerAction,
    _In_
    WDF_POWER_DEVICE_STATE DeviceState
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
ACX_DX_EXIT_LATENCY
AcxDeviceGetCurrentDxExitLatency(
    _In_
    WDFDEVICE Device,
    _In_
    POWER_ACTION SystemPowerAction,
    _In_
    WDF_POWER_DEVICE_STATE DeviceState
    )
{
    return ((PFN_ACXDEVICEGETCURRENTDXEXITLATENCY) AcxFunctions[AcxDeviceGetCurrentDxExitLatencyTableIndex])(AcxDriverGlobals, Device, SystemPowerAction, DeviceState);
}



#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


WDF_EXTERN_C_END

#endif // _ACXDEVICE_H_

