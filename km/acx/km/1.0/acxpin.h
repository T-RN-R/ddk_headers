/*++

Copyright (c) Microsoft Corporation.  All rights reserved.

Module Name:

    AcxPin.h

Abstract:

    This is the interfaces for the Audio Class eXtension pin object

Environment:

    Kernel-mode.

Revision History:

--*/

//
// NOTE: This header is generated by stubwork.  Please make any 
//       modifications to the corresponding template files 
//       (.x or .y) and use stubwork to regenerate the header
//

#ifndef _ACXPIN_H_
#define _ACXPIN_H_

#ifndef WDF_EXTERN_C
  #ifdef __cplusplus
    #define WDF_EXTERN_C       extern "C"
    #define WDF_EXTERN_C_START extern "C" {
    #define WDF_EXTERN_C_END   }
  #else
    #define WDF_EXTERN_C
    #define WDF_EXTERN_C_START
    #define WDF_EXTERN_C_END
  #endif
#endif

WDF_EXTERN_C_START



#if (NTDDI_VERSION >= NTDDI_WIN2K)




//
// ACX pin defines and structures.
//
#define AcxPinIdNone    ((ULONG)(-1))
#define AcxPinIdDefault ((ULONG)(-1))

typedef enum _ACX_PIN_TYPE {
    AcxPinTypeOther  = 0,
    AcxPinTypeSink   = 1,
    AcxPinTypeSource = 2,
    AcxPinTypeMaximum   // for validation
} ACX_PIN_TYPE, *PACX_PIN_TYPE;

typedef enum _ACX_PIN_COMMUNICATION {
    AcxPinCommunicationNone     = 0,
    AcxPinCommunicationSink     = 1,
    AcxPinCommunicationSource   = 2,
    AcxPinCommunicationMaximum   // for validation
} ACX_PIN_COMMUNICATION, *PACX_PIN_COMMUNICATION;

typedef enum _ACX_PIN_QUALIFIER {
    AcxPinQualifierUnknown      = 0,
    AcxPinQualifierBridgeA      = 1, // Composite support only. Streaming pin side.
    AcxPinQualifierBridgeB      = 2, // Composite support only. Device pin side.
    AcxPinQualifierBridgeDevice = 3, // Composite support only.
    AcxPinQualifierMaximum   // for validation
} ACX_PIN_QUALIFIER, *PACX_PIN_QUALIFIER;


typedef
_Function_class_(EVT_ACX_PIN_SET_DATAFORMAT)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
EVT_ACX_PIN_SET_DATAFORMAT(
    _In_
    ACXPIN Pin,
    _In_
    ACXDATAFORMAT DataFormat
    );

typedef EVT_ACX_PIN_SET_DATAFORMAT *PFN_ACX_PIN_SET_DATAFORMAT;

typedef
_Function_class_(EVT_ACX_PIN_RETRIEVE_NAME)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
EVT_ACX_PIN_RETRIEVE_NAME(
    _In_
    ACXPIN Pin,
    _Out_
    PUNICODE_STRING Name
    );

typedef EVT_ACX_PIN_RETRIEVE_NAME *PFN_ACX_PIN_RETRIEVE_NAME;

typedef enum _ACX_JACK_SINK_INFO_CONNECTION_TYPE
{
    AcxJackSinkInfoConnectionTypeHdmi = 0,      // HDMI
    AcxJackSinkInfoConnectionTypeDisplayPort,   // DisplayPort
} ACX_JACK_SINK_INFO_CONNECTION_TYPE, *PACX_JACK_SINK_INFO_CONNECTION_TYPE;

#define ACX_MAX_JACK_SINK_DESCRIPTION_NAME_LENGTH 32

typedef struct _ACX_JACK_SINK_INFORMATION
{
    ACX_JACK_SINK_INFO_CONNECTION_TYPE ConnType; // Connection Type
    USHORT      ManufacturerId;             // Sink manufacturer ID
    USHORT      ProductId;                  // Sink product ID
    USHORT      AudioLatency;               // Sink audio latency
    BOOLEAN     HDCPCapable;                // HDCP Support
    BOOLEAN     AICapable;                  // ACP Packet, ISRC1, and ISRC2 Support
    UCHAR       SinkDescriptionLength;      // Monitor/Sink name length
    WCHAR       SinkDescription[ACX_MAX_JACK_SINK_DESCRIPTION_NAME_LENGTH]; // Monitor/Sink name
    LUID        PortId;                     // Video port identifier
} ACX_JACK_SINK_INFORMATION, *PACX_JACK_SINK_INFORMATION;

typedef
_Function_class_(EVT_ACX_PIN_RETRIEVE_JACK_SINK_INFO)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
EVT_ACX_PIN_RETRIEVE_JACK_SINK_INFO(
    _In_
    ACXPIN Pin,
    _Out_
    PACX_JACK_SINK_INFORMATION SinkInfo
    );

typedef EVT_ACX_PIN_RETRIEVE_JACK_SINK_INFO *PFN_ACX_PIN_RETRIEVE_JACK_SINK_INFO;

typedef
_Function_class_(EVT_ACX_PIN_CONNECTED)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
VOID
NTAPI
EVT_ACX_PIN_CONNECTED(
    _In_
    ACXPIN Pin,
    _In_
    ACXTARGETCIRCUIT TargetCircuit,
    _In_
    ULONG TargetPinId
    );

typedef EVT_ACX_PIN_CONNECTED *PFN_ACX_PIN_CONNECTED;

typedef
_Function_class_(EVT_ACX_PIN_DISCONNECTED)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
VOID
NTAPI
EVT_ACX_PIN_DISCONNECTED(
    _In_
    ACXPIN Pin,
    _In_
    ACXTARGETCIRCUIT TargetCircuit,
    _In_
    ULONG TargetPinId
    );

typedef EVT_ACX_PIN_DISCONNECTED *PFN_ACX_PIN_DISCONNECTED;

typedef struct _ACX_PIN_CALLBACKS {
    ULONG                               Size;
    PFN_ACX_PIN_SET_DATAFORMAT          EvtAcxPinSetDataFormat;
    PFN_ACX_PIN_RETRIEVE_NAME           EvtAcxPinRetrieveName;
    PFN_ACX_PIN_RETRIEVE_JACK_SINK_INFO EvtAcxPinRetrieveJackSinkInfo;
    PFN_ACX_OBJECT_PROCESS_REQUEST      EvtAcxPinProcessJackRequest;
    PFN_ACX_PIN_CONNECTED               EvtAcxPinConnected;
    PFN_ACX_PIN_DISCONNECTED            EvtAcxPinDisconnected;
} ACX_PIN_CALLBACKS, *PACX_PIN_CALLBACKS;

VOID
FORCEINLINE
ACX_PIN_CALLBACKS_INIT(
    _Out_ PACX_PIN_CALLBACKS PinCallbacks
    )
{
    RtlZeroMemory(PinCallbacks, sizeof(ACX_PIN_CALLBACKS));
    PinCallbacks->Size = ACX_STRUCTURE_SIZE(ACX_PIN_CALLBACKS);
}

typedef struct _ACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION {
    ULONG Size;
    ULONG PrimaryChannelCount;
    ULONG PrimaryChannelStartPosition;
    ULONG PrimaryChannelMask;
    ULONG InterleavedChannelCount;
    ULONG InterleavedChannelStartPosition;
    ULONG InterleavedChannelMask;
} ACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION, *PACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION;

VOID
FORCEINLINE
ACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION_INIT(
    _Out_ PACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION format
    )
{
    RtlZeroMemory(format, sizeof(ACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION));

    format->Size = ACX_STRUCTURE_SIZE(ACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION);
}

typedef struct _ACX_MICROPHONE_CONFIG {
    ULONG               Size;
    ULONG               Flags;
    LONG                MicrophoneSnrDB;         // 16.16 fixed point dB value; LONG_MIN = unsupported
    LONG                MicrophoneSensitivityDB; // 16.16 fixed point dB value; LONG_MIN = unsupported
    ACXMICARRAYGEOMETRY MicArrayGeometry;
    PACX_INTERLEAVED_AUDIO_FORMAT_INFORMATION InterleavedFormat; // NULL if unsupported
} ACX_MICROPHONE_CONFIG, *PACX_MICROPHONE_CONFIG;

typedef enum _ACX_MICROPHONE_CONFIG_FLAGS {
    AcxMicrophoneConfigNoFlags      = 0x00000000,
    AcxMicrophoneConfigValidFlags   = 0x00000000
} ACX_MICROPHONE_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_MICROPHONE_CONFIG_INIT(
    _Out_ PACX_MICROPHONE_CONFIG Config
    )
{
    const LONG LONG_MIN_VALUE = (-2147483647L - 1);
    RtlZeroMemory(Config, sizeof(ACX_MICROPHONE_CONFIG));

    Config->Size = ACX_STRUCTURE_SIZE(ACX_MICROPHONE_CONFIG);
    Config->MicrophoneSnrDB = LONG_MIN_VALUE;
    Config->MicrophoneSensitivityDB = LONG_MIN_VALUE;
    Config->Flags = AcxMicrophoneConfigNoFlags;
}

typedef struct _ACX_PIN_CONFIG {
    ULONG                           Size;
    ULONG                           Flags;
    ULONG                           Id;
    ACX_PIN_TYPE                    Type;
    ACX_PIN_COMMUNICATION           Communication;
    ACX_PIN_QUALIFIER               Qualifier;
    const GUID *                    Category;
    const GUID *                    Name;
    PACX_PIN_CALLBACKS              PinCallbacks;
    ULONG                           PropertiesCount;
    ULONG                           MethodsCount;
    PACX_PROPERTY_ITEM              Properties;
    PACX_METHOD_ITEM                Methods;
    union
    {
        PACX_MICROPHONE_CONFIG      MicrophoneConfig;
    } u;
} ACX_PIN_CONFIG, *PACX_PIN_CONFIG;

typedef enum _ACX_PIN_CONFIG_FLAGS {
    AcxPinConfigNoFlags                     = 0x00000000,
    AcxPinConfigMicrophoneConfigSpecified   = 0x00000001,
    AcxPinConfigValidFlags                  = 0x00000001
} ACX_PIN_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_PIN_CONFIG_INIT_ID(
    _Out_ PACX_PIN_CONFIG Config,
    _In_  ULONG Id
    )
{
    RtlZeroMemory(Config, sizeof(ACX_PIN_CONFIG));

    Config->Size = ACX_STRUCTURE_SIZE(ACX_PIN_CONFIG);
    Config->Id = Id;
    Config->Flags = AcxPinConfigNoFlags;
}

#define ACX_PIN_CONFIG_INIT(cfg) \
    ACX_PIN_CONFIG_INIT_ID(cfg, AcxPinIdDefault)

//
// ACX connection defines and structures.
//
typedef enum _ACX_CONNECTION_FLAGS {
    AcxConnectionNoFlags        = 0x00000000,
    AcxConnectionFromPinId      = 0x00000000,
    AcxConnectionFromPinObject  = 0x00000001,
    AcxConnectionToPinId        = 0x00000000,
    AcxConnectionToPinObject    = 0x00000002,
    AcxConnectionValidFlags     = 0x00000003
} ACX_CONNECTION_FLAGS;

typedef struct _ACX_CONNECTION {
    ULONG               Size;
    ULONG               Flags;

    ACXOBJECT           FromObject;
    union {

        ACXPIN          Object;
        ULONG           Id;
    } FromPin;

    ACXOBJECT           ToObject;
    union {

        ACXPIN          Object;
        ULONG           Id;
    } ToPin;

} ACX_CONNECTION, *PACX_CONNECTION;

VOID
FORCEINLINE
ACX_CONNECTION_INIT(
    _Out_ PACX_CONNECTION Connection,
    _In_  ACXOBJECT FromObject,
    _In_  ACXOBJECT ToObject
    )
{
    RtlZeroMemory(Connection, sizeof(ACX_CONNECTION));
    Connection->Size = ACX_STRUCTURE_SIZE(ACX_CONNECTION);
    Connection->Flags = AcxConnectionNoFlags;
    Connection->FromObject = FromObject;
    Connection->FromPin.Id = AcxPinIdDefault;
    Connection->ToObject = ToObject;
    Connection->ToPin.Id = AcxPinIdDefault;
}

//
// ACX physical connection defines and structures.
//
typedef enum _ACX_PHYSICAL_CONNECTION_FLAGS {
    AcxPhysicalConnectionNoFlags        = 0x00000000,
    AcxPhysicalConnectionFromPinId      = 0x00000000,
    AcxPhysicalConnectionFromPinObject  = 0x00000001,
    AcxPhysicalConnectionValidFlags     = 0x00000001
} ACX_PHYSICAL_CONNECTION_FLAGS;

typedef struct _ACX_PHYSICAL_CONNECTION {
    ULONG               Size;
    ULONG               Flags;

    union {
        ACXPIN          Object;
        ULONG           Id;
    } FromPin;

    WDFSTRING           TargetName;
    ULONG               TargetPinId;

} ACX_PHYSICAL_CONNECTION, *PACX_PHYSICAL_CONNECTION;

VOID
FORCEINLINE
ACX_PHYSICAL_CONNECTION_INIT(
    _Out_ PACX_PHYSICAL_CONNECTION Connection
    )
{
    RtlZeroMemory(Connection, sizeof(ACX_PHYSICAL_CONNECTION));
    Connection->Size = ACX_STRUCTURE_SIZE(ACX_PHYSICAL_CONNECTION);
}



//
// ACX Jack defines and structures.
//
#define AcxJackPropertiesIdNone     ((ULONG)(-1))
#define AcxJackPropertiesIdDefault  ((ULONG)(-1))

// Enums used in ACX_JACK_DESCRIPTION

typedef enum _ACX_JACK_CONNECTION_TYPE
{
    AcxConnTypeUnknown,
    AcxConnType3Point5mm,
    AcxConnTypeQuarter,
    AcxConnTypeAtapiInternal,
    AcxConnTypeRCA,
    AcxConnTypeOptical,
    AcxConnTypeOtherDigital,
    AcxConnTypeOtherAnalog,
    AcxConnTypeMultichannelAnalogDIN,
    AcxConnTypeXlrProfessional,
    AcxConnTypeRJ11Modem,
    AcxConnTypeCombination
} ACX_JACK_CONNECTION_TYPE, *PACX_JACK_CONNECTION_TYPE;

typedef enum _ACX_JACK_GEO_LOCATION
{
    AcxGeoLocRear = 0x1,
    AcxGeoLocFront,
    AcxGeoLocLeft,
    AcxGeoLocRight,
    AcxGeoLocTop,
    AcxGeoLocBottom,
    AcxGeoLocRearPanel,
    AcxGeoLocRiser,
    AcxGeoLocInsideMobileLid,
    AcxGeoLocDrivebay,
    AcxGeoLocHDMI,
    AcxGeoLocOutsideMobileLid,
    AcxGeoLocATAPI,
    AcxGeoLocNotApplicable,
    AcxGeoLocReserved6,
    AcxJackGeoLocationMaximum
} ACX_JACK_GEO_LOCATION, *PACX_JACK_GEO_LOCATION;

typedef enum _ACX_JACK_GEN_LOCATION
{
    AcxGenLocPrimaryBox = 0,
    AcxGenLocInternal,
    AcxGenLocSeparate,
    AcxGenLocOther,
    AcxJackGenLocationMaximum
} ACX_JACK_GEN_LOCATION, *PACX_JACK_GEN_LOCATION;

typedef enum _ACX_JACK_PORT_CONNECTION
{
    AcxPortConnJack = 0,
    AcxPortConnIntegratedDevice,
    AcxPortConnBothIntegratedAndJack,
    AcxPortConnUnknown
} ACX_JACK_PORT_CONNECTION, *PACX_JACK_PORT_CONNECTION;

typedef struct _ACX_JACK_DESCRIPTION {
    ULONG                       ChannelMapping;
    ULONG                       Color;
    ACX_JACK_CONNECTION_TYPE    ConnectionType;
    ACX_JACK_GEO_LOCATION       GeoLocation;
    ACX_JACK_GEN_LOCATION       GenLocation;
    ACX_JACK_PORT_CONNECTION    PortConnection;
} ACX_JACK_DESCRIPTION, *PACX_JACK_DESCRIPTION;

typedef
_Function_class_(EVT_ACX_JACK_RETRIEVE_PRESENCE_STATE)
_IRQL_requires_same_
_IRQL_requires_max_(PASSIVE_LEVEL)
NTSTATUS
NTAPI
EVT_ACX_JACK_RETRIEVE_PRESENCE_STATE(
    _In_
    ACXJACK Jack,
    _Out_
    PBOOLEAN IsConnected
    );

typedef EVT_ACX_JACK_RETRIEVE_PRESENCE_STATE *PFN_ACX_JACK_RETRIEVE_PRESENCE_STATE;

typedef struct _ACX_JACK_CALLBACKS {
    ULONG                                   Size;
    PFN_ACX_JACK_RETRIEVE_PRESENCE_STATE    EvtAcxJackRetrievePresenceState;
} ACX_JACK_CALLBACKS, *PACX_JACK_CALLBACKS;

VOID
FORCEINLINE
ACX_JACK_CALLBACKS_INIT(
    _Out_ PACX_JACK_CALLBACKS Callbacks
)
{
    RtlZeroMemory(Callbacks, sizeof(ACX_JACK_CALLBACKS));
    Callbacks->Size = ACX_STRUCTURE_SIZE(ACX_JACK_CALLBACKS);
}

typedef struct _ACX_JACK_CONFIG {
    ULONG                   Size;
    ULONG                   Id;
    ULONG                   Flags;
    PACX_JACK_CALLBACKS     Callbacks;
    ACX_JACK_DESCRIPTION    Description;
} ACX_JACK_CONFIG, *PACX_JACK_CONFIG;

typedef enum _ACX_JACK_CONFIG_FLAGS {
    AcxJackConfigNoFlags        = 0x00000000,
    AcxJackConfigJackDetection  = 0x00000001,
    AcxJackConfigValidFlags     = 0x00000001
} ACX_JACK_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_JACK_CONFIG_INIT_ID(
    _Out_ PACX_JACK_CONFIG Config,
    _In_  ULONG Id
    )
{
    RtlZeroMemory(Config, sizeof(ACX_JACK_CONFIG));

    Config->Size = ACX_STRUCTURE_SIZE(ACX_JACK_CONFIG);
    Config->Id = Id;
    Config->Flags = AcxJackConfigNoFlags;
}

#define ACX_JACK_CONFIG_INIT(cfg) \
    ACX_JACK_CONFIG_INIT_ID(cfg, AcxJackPropertiesIdDefault)

typedef enum _ACX_MICROPHONE_TYPE
{
    AcxMicrophoneTypeOmniDirectional,
    AcxMicrophoneTypeSubCardioid,
    AcxMicrophoneTypeCardioid,
    AcxMicrophoneTypeSuperCardioid,
    AcxMicrophoneTypeHyperCardioid,
    AcxMicrophoneType8Shaped,
    AcxMicrophoneTypeMaximum, // For Validation
    AcxMicrophoneTypeVendorDefined = 0x0f
} ACX_MICROPHONE_TYPE;

typedef struct _ACX_MICROPHONE_COORDINATES
{
    USHORT Type;            // Type of Microphone
    SHORT XCoord;           // X Coordinate of Mic
    SHORT YCoord;           // Y Coordinate of Mic
    SHORT ZCoord;           // Z Coordinate of Mic
    SHORT VerticalAngle;    // MRA Vertical Angle
    SHORT HorizontalAngle;  // MRA Horizontal Angle
} ACX_MICROPHONE_COORDINATES, *PACX_MICROPHONE_COORDINATES;

typedef enum _ACX_MIC_ARRAY_TYPE
{
    AcxMicArrayTypeLinear,
    AcxMicArrayTypePlanar,
    AcxMicArrayType3d,
    AcxMicArrayTypeMaximum // For Validation
} ACX_MIC_ARRAY_TYPE;

typedef struct _ACX_MIC_ARRAY_GEOMETRY
{
    USHORT Version;             // Version of Mic array specification (0x0100)
    USHORT MicArrayType;        // Type of Mic Array
    SHORT VerticalAngleBegin;   // Work Volume Vertical Angle Begin
    SHORT VerticalAngleEnd;     // Work Volume Vertical Angle End
    SHORT HorizontalAngleBegin; // Work Volume HorizontalAngle Begin
    SHORT HorizontalAngleEnd;   // Work Volume HorizontalAngle End
    ULONG FrequencyBandLo;      // Low end of Freq Range (If Version is 0x0100 this cannot be greater than USHORT_MAX)
    ULONG FrequencyBandHi;      // High end of Freq Range (If Version is 0x0100 this cannot be greater than USHORT_MAX)
} ACX_MIC_ARRAY_GEOMETRY, *PACX_MIC_ARRAY_GEOMETRY;

typedef struct _ACX_MICARRAYGEOMETRY_CONFIG {
    ULONG                   Size;
    ULONG                   Flags;
    ACX_MIC_ARRAY_GEOMETRY  Geometry;
} ACX_MICARRAYGEOMETRY_CONFIG, *PACX_MICARRAYGEOMETRY_CONFIG;

typedef enum _ACX_MICARRAYGEOMETRY_CONFIG_FLAGS {
    AcxMicArrayGeometryConfigNoFlags    = 0x00000000,
    AcxMicArrayGeometryConfigValidFlags = 0x00000000
} ACX_MICARRAYGEOMETRY_CONFIG_FLAGS;

VOID
FORCEINLINE
ACX_MICARRAYGEOMETRY_CONFIG_INIT(
    _Out_ PACX_MICARRAYGEOMETRY_CONFIG Config
    )
{
    RtlZeroMemory(Config, sizeof(ACX_MICARRAYGEOMETRY_CONFIG));

    Config->Size = ACX_STRUCTURE_SIZE(ACX_MICARRAYGEOMETRY_CONFIG);
    Config->Flags = AcxMicArrayGeometryConfigNoFlags;
}


//
// ACX Function: AcxPinCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINCREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXCIRCUIT Circuit,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_PIN_CONFIG Config,
    _Out_
    ACXPIN* Pin
    );

_Must_inspect_result_
_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinCreate(
    _In_
    ACXCIRCUIT Circuit,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_PIN_CONFIG Config,
    _Out_
    ACXPIN* Pin
    )
{
    return ((PFN_ACXPINCREATE) AcxFunctions[AcxPinCreateTableIndex])(AcxDriverGlobals, Circuit, Attributes, Config, Pin);
}

//
// ACX Function: AcxPinAddEvents
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINADDEVENTS)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN Pin,
    _In_reads_(EventsCount)
    ACXEVENT* Events,
    _In_
    ULONG EventsCount
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinAddEvents(
    _In_
    ACXPIN Pin,
    _In_reads_(EventsCount)
    ACXEVENT* Events,
    _In_
    ULONG EventsCount
    )
{
    return ((PFN_ACXPINADDEVENTS) AcxFunctions[AcxPinAddEventsTableIndex])(AcxDriverGlobals, Pin, Events, EventsCount);
}

//
// ACX Function: AcxPinAddJacks
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINADDJACKS)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN Pin,
    _In_
    ACXJACK* Jacks,
    _In_
    ULONG jackCount
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinAddJacks(
    _In_
    ACXPIN Pin,
    _In_
    ACXJACK* Jacks,
    _In_
    ULONG jackCount
    )
{
    return ((PFN_ACXPINADDJACKS) AcxFunctions[AcxPinAddJacksTableIndex])(AcxDriverGlobals, Pin, Jacks, jackCount);
}

//
// ACX Function: AcxPinRetrieveModeDataFormatList
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINRETRIEVEMODEDATAFORMATLIST)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin,
    _In_
    CONST GUID* SignalProcessingMode,
    _Out_
    ACXDATAFORMATLIST* DataFormatList
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinRetrieveModeDataFormatList(
    _In_
    ACXPIN AcxPin,
    _In_
    CONST GUID* SignalProcessingMode,
    _Out_
    ACXDATAFORMATLIST* DataFormatList
    )
{
    return ((PFN_ACXPINRETRIEVEMODEDATAFORMATLIST) AcxFunctions[AcxPinRetrieveModeDataFormatListTableIndex])(AcxDriverGlobals, AcxPin, SignalProcessingMode, DataFormatList);
}

//
// ACX Function: AcxPinAssignModeDataFormatList
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINASSIGNMODEDATAFORMATLIST)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin,
    _In_
    CONST GUID* SignalProcessingMode,
    _In_
    ACXDATAFORMATLIST DataFormatList
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinAssignModeDataFormatList(
    _In_
    ACXPIN AcxPin,
    _In_
    CONST GUID* SignalProcessingMode,
    _In_
    ACXDATAFORMATLIST DataFormatList
    )
{
    return ((PFN_ACXPINASSIGNMODEDATAFORMATLIST) AcxFunctions[AcxPinAssignModeDataFormatListTableIndex])(AcxDriverGlobals, AcxPin, SignalProcessingMode, DataFormatList);
}

//
// ACX Function: AcxPinGetRawDataFormatList
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ACXDATAFORMATLIST
(NTAPI *PFN_ACXPINGETRAWDATAFORMATLIST)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
ACXDATAFORMATLIST
AcxPinGetRawDataFormatList(
    _In_
    ACXPIN AcxPin
    )
{
    return ((PFN_ACXPINGETRAWDATAFORMATLIST) AcxFunctions[AcxPinGetRawDataFormatListTableIndex])(AcxDriverGlobals, AcxPin);
}

//
// ACX Function: AcxPinNotifyDataFormatChange
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINNOTIFYDATAFORMATCHANGE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN Pin
    );

_Must_inspect_result_
_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinNotifyDataFormatChange(
    _In_
    ACXPIN Pin
    )
{
    return ((PFN_ACXPINNOTIFYDATAFORMATCHANGE) AcxFunctions[AcxPinNotifyDataFormatChangeTableIndex])(AcxDriverGlobals, Pin);
}

//
// ACX Function: AcxPinAddStreamBridges
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINADDSTREAMBRIDGES)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN Pin,
    _In_reads_(StreamBridgesCount)
    ACXSTREAMBRIDGE* StreamBridges,
    _In_
    ULONG StreamBridgesCount
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinAddStreamBridges(
    _In_
    ACXPIN Pin,
    _In_reads_(StreamBridgesCount)
    ACXSTREAMBRIDGE* StreamBridges,
    _In_
    ULONG StreamBridgesCount
    )
{
    return ((PFN_ACXPINADDSTREAMBRIDGES) AcxFunctions[AcxPinAddStreamBridgesTableIndex])(AcxDriverGlobals, Pin, StreamBridges, StreamBridgesCount);
}

//
// ACX Function: AcxPinRemoveStreamBridges
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXPINREMOVESTREAMBRIDGES)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN Pin,
    _In_reads_(StreamBridgesCount)
    ACXSTREAMBRIDGE* StreamBridges,
    _In_
    ULONG StreamBridgesCount
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxPinRemoveStreamBridges(
    _In_
    ACXPIN Pin,
    _In_reads_(StreamBridgesCount)
    ACXSTREAMBRIDGE* StreamBridges,
    _In_
    ULONG StreamBridgesCount
    )
{
    return ((PFN_ACXPINREMOVESTREAMBRIDGES) AcxFunctions[AcxPinRemoveStreamBridgesTableIndex])(AcxDriverGlobals, Pin, StreamBridges, StreamBridgesCount);
}

//
// ACX Function: AcxPinGetCircuit
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ACXCIRCUIT
(NTAPI *PFN_ACXPINGETCIRCUIT)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
ACXCIRCUIT
AcxPinGetCircuit(
    _In_
    ACXPIN AcxPin
    )
{
    return ((PFN_ACXPINGETCIRCUIT) AcxFunctions[AcxPinGetCircuitTableIndex])(AcxDriverGlobals, AcxPin);
}

//
// ACX Function: AcxPinGetType
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ACX_PIN_TYPE
(NTAPI *PFN_ACXPINGETTYPE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
ACX_PIN_TYPE
AcxPinGetType(
    _In_
    ACXPIN AcxPin
    )
{
    return ((PFN_ACXPINGETTYPE) AcxFunctions[AcxPinGetTypeTableIndex])(AcxDriverGlobals, AcxPin);
}

//
// ACX Function: AcxPinGetId
//
typedef
_IRQL_requires_max_(DISPATCH_LEVEL)
WDFAPI
ULONG
(NTAPI *PFN_ACXPINGETID)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin
    );

_IRQL_requires_max_(DISPATCH_LEVEL)
FORCEINLINE
ULONG
AcxPinGetId(
    _In_
    ACXPIN AcxPin
    )
{
    return ((PFN_ACXPINGETID) AcxFunctions[AcxPinGetIdTableIndex])(AcxDriverGlobals, AcxPin);
}

//
// ACX Function: AcxJackCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXJACKCREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXPIN AcxPin,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_JACK_CONFIG Config,
    _Out_
    ACXJACK* Jack
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxJackCreate(
    _In_
    ACXPIN AcxPin,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_JACK_CONFIG Config,
    _Out_
    ACXJACK* Jack
    )
{
    return ((PFN_ACXJACKCREATE) AcxFunctions[AcxJackCreateTableIndex])(AcxDriverGlobals, AcxPin, Attributes, Config, Jack);
}

//
// ACX Function: AcxJackChangeStateNotification
//
typedef
WDFAPI
VOID
(NTAPI *PFN_ACXJACKCHANGESTATENOTIFICATION)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXJACK Jack
    );

FORCEINLINE
VOID
AcxJackChangeStateNotification(
    _In_
    ACXJACK Jack
    )
{
    ((PFN_ACXJACKCHANGESTATENOTIFICATION) AcxFunctions[AcxJackChangeStateNotificationTableIndex])(AcxDriverGlobals, Jack);
}

//
// ACX Function: AcxMicArrayGeometryCreate
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXMICARRAYGEOMETRYCREATE)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXCIRCUIT AcxCircuit,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_MICARRAYGEOMETRY_CONFIG Config,
    _Out_
    ACXMICARRAYGEOMETRY* MicArrayGeometry
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxMicArrayGeometryCreate(
    _In_
    ACXCIRCUIT AcxCircuit,
    _In_
    PWDF_OBJECT_ATTRIBUTES Attributes,
    _In_
    PACX_MICARRAYGEOMETRY_CONFIG Config,
    _Out_
    ACXMICARRAYGEOMETRY* MicArrayGeometry
    )
{
    return ((PFN_ACXMICARRAYGEOMETRYCREATE) AcxFunctions[AcxMicArrayGeometryCreateTableIndex])(AcxDriverGlobals, AcxCircuit, Attributes, Config, MicArrayGeometry);
}

//
// ACX Function: AcxMicArrayGeometryAddMicrophoneCoordinates
//
typedef
_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
WDFAPI
NTSTATUS
(NTAPI *PFN_ACXMICARRAYGEOMETRYADDMICROPHONECOORDINATES)(
    _In_
    PACX_DRIVER_GLOBALS DriverGlobals,
    _In_
    ACXMICARRAYGEOMETRY MicArrayGeometry,
    _In_reads_(MicrophoneCoordinatesCount)
    PACX_MICROPHONE_COORDINATES MicrophoneCoordinates,
    _In_
    ULONG MicrophoneCoordinatesCount
    );

_Must_inspect_result_
_IRQL_requires_max_(PASSIVE_LEVEL)
FORCEINLINE
NTSTATUS
AcxMicArrayGeometryAddMicrophoneCoordinates(
    _In_
    ACXMICARRAYGEOMETRY MicArrayGeometry,
    _In_reads_(MicrophoneCoordinatesCount)
    PACX_MICROPHONE_COORDINATES MicrophoneCoordinates,
    _In_
    ULONG MicrophoneCoordinatesCount
    )
{
    return ((PFN_ACXMICARRAYGEOMETRYADDMICROPHONECOORDINATES) AcxFunctions[AcxMicArrayGeometryAddMicrophoneCoordinatesTableIndex])(AcxDriverGlobals, MicArrayGeometry, MicrophoneCoordinates, MicrophoneCoordinatesCount);
}



#endif // (NTDDI_VERSION >= NTDDI_WIN2K)


WDF_EXTERN_C_END

#endif // _ACXPIN_H_


